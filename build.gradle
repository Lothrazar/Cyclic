buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
       // maven { url = 'https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
      //  classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: 'org.spongepowered.mixin'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

version = "${mc_version}-${mod_version}"
group = 'com.lothrazar.cyclic' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Cyclic'


sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    
    mappings channel: 'snapshot', version: mappings_version

    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.disableRefMap', 'true'
		  
            mods {
                cyclic {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                cyclic {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cyclic', '--all', '--output', file('src/generated/resources/')

            mods {
                cyclic {
                    source sourceSets.main
                }
            }
        }
    }
}

//mixin {
// IMPORTANT: RUN CONFIGURATION PROGRAM ARGUMENTS   --mixin mixins.myplugin.json
       //add sourceSets.main, "main.refmap.json"

       //disableTargetValidator = false
//}

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    
    compile fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    compile fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
    
   compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
   runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

repositories {
  maven {
    name = "mappings"
    url 'https://dogforce-games.com/maven'
  }
  maven { url = "https://dvs1.progwml6.com/files/maven/"  }
  maven { url = "https://modmaven.k-4u.nl"  }    
  maven { url = "https://maven.theillusivec4.top/"    }
  maven { url 'http://maven.mcmoddev.com'    }
  maven { url 'https://maven.blamejared.com' }
    
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "cyclic",
            "Specification-Vendor": "cyclicsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"cyclicsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            
            //'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
	        //'MixinConfigs': 'mixins.myplugin.json',
	        //'FMLCorePluginContainsFMLMod': 'true',
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task copyJar(type: Copy) {
    from jar
    into "${dist_folder}"
}

build.finalizedBy copyJar

cleanJar {
  delete 'build/libs'
}
